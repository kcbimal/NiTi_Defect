# -*- coding: utf-8 -*-
"""
Created on Mon Nov 11 15:59:34 2019

@author: Jorge Muñoz, Cesar Diaz-Caraveo
jamunoz@utep.edu
cdiazcarav@miners.utep.edu, cesar.dc1509@gmail.com

The University of Texas at El Paso

Code adapted and used as part of the scripts needed for writing the paper 
"Finite-temperature free energies of bcc-based Ni-Ti alloys with thermal and 
chemical disorder from molecular dynamics". It had been previously written and 
used on other projects by Prof. Jorge Muñoz. 

The program reads two excel files corresponding to the volume vs energy results 
generated by molecular dynamics in LAMMPS. These two files correspond to the 
results at 500 and 1000 timesteps. The two data sets are joint together and a 
fit is applied based on the Birch-Murnagham equation of state. An excel output
file is generated containing the results for internal energy, unit cell volume,
bulk modulus, bulk modulus derivative, lattice parameter, and their respective 
errors.

Sometimes due to potential problems, the data selection needs to be manually 
adjusted to make the equation fit concide with the minimum energy point. The 
titanium composition needs to be manually input at the beginning of the code 
for ouput naming and clarity purposes.

"""

from numpy import sqrt, pi, exp, linspace, loadtxt
from lmfit import  Model
import pandas as pd

import matplotlib, math
import numpy as np
import matplotlib.pyplot as plt

import seaborn as sns

#%% Birch-Murnaghan Equation of State Functions 

def E_BM(V, E0, V0, B0, B0p):
    return E0 + (9/16) * V0 * B0 * ((B0p * ((V0/V)**(2/3) - 1 )**3) + (((V0/V)**(2/3) - 1 )**2) * (6 - 4 * ((V0/V)**(2/3))))


def E_M(V, E0, V0, B0, B0p):
    return E0 + B0*V0*((1/(B0p*(B0p-1)))*((V/V0)**(1-B0p)) + (V/(B0p*V0)) - (1/(B0p-1)))


#%% Simulation

composition = 0.5
fe_composition = 1 - composition

simulation_1 = pd.read_excel('Lattice vs Energy Ni{}Ti{} - 500 timesteps.xlsx'.format(fe_composition, composition))
simulation_2 = pd.read_excel('Lattice vs Energy Ni{}Ti{} - 1000 timesteps.xlsx'.format(fe_composition, composition))

simulation_1 = np.array(simulation_1)
simulation_2 = np.array(simulation_2)

#print(simulation_1)

# Stacking lattice parameters
X = np.vstack([simulation_1[:, 1].reshape(len(simulation_1[:, 1]), 1), 
               simulation_2[:, 1].reshape(len(simulation_2[:, 1]), 1)])
V = X ** 3

# Stacking energies
E = np.vstack([simulation_1[:, 2].reshape(len(simulation_1[:, 2]), 1), 
               simulation_2[:, 2].reshape(len(simulation_2[:, 2]), 1)])
E = E / 2000

print(X)
print(np.shape(X))
print('\n')
print(V)
print(np.shape(X))
print('\n')
print(E)
print(np.shape(E))

#Y = [(x)*13.605685 for x in E]

gmodel = Model(E_M)
result = gmodel.fit(E, V=V, E0=-4, V0=20, B0=100, B0p=-4)

print(result.fit_report())
print('\n')


#%% Saving Parameters to CSV

param_array = np.zeros([5, 2])
indexes = []
i = 0

for parname, par in result.params.items():
    indexes.append(parname)
    param_array[i, 0] = par.value
    param_array[i, 1] = par.stderr
    print(parname, par.value, par.stderr)
    
    i += 1
    
param_array[2, :] = param_array[2, :]*160.2*math.sqrt(2)

lattice_val = (param_array[1, 0])**(1/3)
lattice_error = ((param_array[1, 0] + param_array[1, 1])**(1/3) -
                 (param_array[1, 0] - param_array[1, 1])**(1/3)) / 2
param_array[i, 0] = lattice_val
param_array[i, 1] = lattice_error
indexes.append('L0')

cols = ['Value', 'Error']

df_param_array = pd.DataFrame(param_array, index = indexes, columns = cols)
df_param_array.to_csv('Errors and Parameters Birch Murnaghan {}.csv'.format(composition))


#%% Birch-Murnagham Code Continuation 

params = result.best_values

vols = []
ens = []
i = int(math.floor(V[0]))
j = int(math.floor(V[-1])+3)
print(i, j)

volumes = np.linspace(i, j, num=50)

for v in volumes:
    ens.append(E_M(v, params['E0'], params['V0'], params['B0'], params['B0p']))


plt.plot(V, E, 'bo')
#plt.plot(X, result.init_fit, 'k--')
plt.plot(volumes, ens)
plt.title('Ni{}Ti{} Random 500K Birch-Murnaghan'.format(fe_composition, composition))
plt.xlabel('Volume (Angstroms^3)')
plt.ylabel('Energy (eV)')
plt.show()

print('Bulk modulus:', params['B0']*160.2*math.sqrt(2))
print('Bulk modulus prime:', params['B0p'])
print('Lattice param:', params['V0']**(1/3))